# Stream Deck Plugin Development Best Practices

This guide outlines best practices for Stream Deck plugin development in a tiered structure:
- **Core Requirements**: Essential for all plugins
- **Standard Practices**: Recommended for production plugins
- **Advanced Features**: For complex, specialized plugins

## Core Requirements (All Plugins)

### Project Structure

#### Essential Files
- `manifest.json` - Plugin configuration with complete metadata
- `*.sdPlugin` directory containing:
  - `/bin` - Compiled JavaScript files
  - `/ui` - Property Inspector HTML
  - `/imgs` - Plugin images and icons

#### Basic Organization
- Use clear naming conventions
- Place related files in appropriate directories
- Follow basic TypeScript/JavaScript conventions

### TypeScript Fundamentals

#### Basic Action Implementation
```typescript
@action({ UUID: 'com.example.action-id' })
export class MyAction extends Action<MySettings> {
  // Implementation
}
```

#### Simple Type Safety
```typescript
type MySettings = {
  property: string;
};
```

### Action Essentials

#### Required Event Handlers
- `onWillAppear` - Initialize state
- `onKeyDown` - Handle key press
- `onDidReceiveSettings` - React to settings changes

#### Basic Settings Management
```typescript
// Merge with defaults
const settings = { ...DEFAULT_SETTINGS, ...ev.payload.settings };
// Save settings
action.setSettings({ updatedProperty: newValue });
```

### Error Handling Basics

#### Critical Operation Protection
```typescript
try {
  await performCriticalOperation();
} catch (error) {
  streamDeck.logger.error('Operation failed:', error);
}
```

### Build Foundation

#### Minimal Configuration
- Configure development and production builds
- Set up basic source maps

## Standard Practices (Production Plugins)

### Project Organization

#### Enhanced Structure
- Organize TypeScript files by feature
- Group related functions and utilities
- Create reusable components

### TypeScript Implementation

#### Class Inheritance
- `Action` - Base class for standard actions
- `SingletonAction` - For actions that need to track all instances

#### Advanced Type Safety
```typescript
// More comprehensive typing
type MySettings = {
  propertyA: boolean;
  propertyB: string | null;
  propertyC: number;
};

const DEFAULT_SETTINGS: MySettings = {
  propertyA: false,
  propertyB: null,
  propertyC: 0
};
```

#### Event Type Safety
```typescript
override onWillAppear(ev: WillAppearEvent<MySettings>): void {
  // Implementation with type safety
}
```

### Action Development

#### Lifecycle Management
- Implement all relevant lifecycle handlers
- Handle state transitions cleanly
- Manage resources appropriately

#### Multi-Action Compatibility
```typescript
if (ev.payload.isInMultiAction) {
  // Handle multi-action case differently
  return;
}
```

#### Position Awareness (When Needed)
```typescript
if (ev.action.isKey() && ev.payload.coordinates) {
  // Use coordinates for position-aware actions
}
```

### Resource Management

#### Cleanup Pattern
```typescript
private timer: NodeJS.Timeout | undefined;

// Setup in onWillAppear
this.timer = setInterval(() => { /* ... */ }, interval);

// Cleanup in onWillDisappear
override onWillDisappear(): void {
  if (this.timer) {
    clearInterval(this.timer);
    this.timer = undefined;
  }
}
```

### Error Handling

#### Comprehensive Error Protection
```typescript
try {
  const response = await fetch('https://api.example.com/data');
  if (!response.ok) {
    throw new Error(`HTTP error ${response.status}`);
  }
  // Process response
} catch (error) {
  streamDeck.logger.error('API error:', error);
  // Visual feedback for error
  action.setImage('error.svg');
  // Recovery logic
}
```

#### Structured Logging
```typescript
// Different log levels
streamDeck.logger.debug('Debug information');
streamDeck.logger.info('General information');
streamDeck.logger.warn('Warning condition');
streamDeck.logger.error('Error condition', error);
```

### Testing Practices

- Validate plugin with `streamdeck validate`
- Test on both hardware and software displays
- Verify settings persistence across Stream Deck restarts

## Advanced Features (Complex Plugins)

### Inter-Action Communication

#### Dependency Injection
```typescript
// Create and inject dependencies
const actionA = new ActionA();
streamDeck.actions.registerAction(actionA);
streamDeck.actions.registerAction(new ActionB(actionA));
```

#### Shared State Management
```typescript
private states: Map<string, number> = new Map();

toggleState(actionId: string) {
  let state = this.states.get(actionId);
  state = state ? 0 : 1;
  this.states.set(actionId, state);
  return state;
}
```

### Encoder Support

#### Controller Configuration
```json
"Controllers": [
  "Encoder"
],
"Encoder": {
  "layout": "$B1",
  "TriggerDescription": {
    "Rotate": "Adjust value"
  }
}
```

#### Layout Management
```json
{
  "$schema": "https://schemas.elgato.com/streamdeck/plugins/layout.json",
  "id": "custom-layout-1",
  "items": [
    {
      "key": "title",
      "type": "text",
      "rect": [0, 0, 200, 100],
      "font": { "size": 20, "weight": 600 }
    }
  ]
}
```

#### Touch Display Feedback
```typescript
// Change layout
action.setFeedbackLayout('layouts/custom-layout.json');

// Update values in current layout
action.setFeedback({ title: 'New Value' });
```

### Device-Specific Features

#### Device Filtering
```typescript
*deviceItems(deviceId: string): IterableIterator<KeyAction<Settings>> {
  for (const action of this.actions) {
    if (action.device.id === deviceId && action.isKey()) {
      yield action;
    }
  }
}
```

#### Profile Configuration
```json
"Profiles": [
  {
    "Name": "standard",
    "DeviceType": 0,
    "Readonly": false
  },
  {
    "Name": "xl",
    "DeviceType": 2,
    "Readonly": false
  }
]
```

### Animation and Visual Effects

#### Advanced Animation Sequences
```typescript
async flashSequence(count: number): Promise<void> {
  const delay = 100;
  while (count-- > 0) {
    await setTimeout(delay);
    this.setAll(LIGHT_OFF);
    await setTimeout(delay);
    this.setAll(LIGHT_ON);
  }
}
```

### Comprehensive Testing

- Test on all supported device types
- Test error conditions and recovery
- Test with various locales and settings
- Check behavior in multi-actions

## Decision Guide: Choosing the Right Complexity Level

### Use Core Requirements When:
- Creating simple demonstration plugins
- Building plugins with limited functionality
- Developing plugins for personal use

### Apply Standard Practices When:
- Developing plugins for public distribution
- Building plugins that manage persistent state
- Creating plugins with multiple actions

### Implement Advanced Features When:
- Creating plugins that work across multiple device types
- Building plugins that need inter-action communication
- Developing plugins that use encoders or touch displays
- Implementing sophisticated visual effects

## Example Implementation Progression

### Basic Implementation (Core)
```typescript
@action({ UUID: 'com.example.counter' })
export class Counter extends Action<CounterSettings> {
  override async onKeyDown(): Promise<void> {
    const count = (this.settings?.count || 0) + 1;
    this.setSettings({ count });
    this.setTitle(`Count: ${count}`);
  }
}
```

### Standard Implementation
```typescript
@action({ UUID: 'com.example.counter' })
export class Counter extends SingletonAction<CounterSettings> {
  private DEFAULT_SETTINGS: CounterSettings = { count: 0 };

  override async onWillAppear(ev: WillAppearEvent<CounterSettings>): Promise<void> {
    if (!ev.action.isKey()) return;
    
    const settings = { ...this.DEFAULT_SETTINGS, ...ev.payload.settings };
    await ev.action.setSettings(settings);
    await this.updateUI(ev.action, settings);
  }

  override async onKeyDown(ev: KeyDownEvent<CounterSettings>): Promise<void> {
    try {
      if (!ev.action.isKey()) return;
      
      const settings = { ...this.DEFAULT_SETTINGS, ...ev.payload.settings };
      settings.count = (settings.count || 0) + 1;
      
      await ev.action.setSettings(settings);
      await this.updateUI(ev.action, settings);
    } catch (error) {
      streamDeck.logger.error('Failed to update counter', error);
    }
  }

  private async updateUI(action: KeyAction<CounterSettings>, settings: CounterSettings): Promise<void> {
    await action.setTitle(`Count: ${settings.count}`);
  }
}
```

### Advanced Implementation
Adding appropriate complexity only when needed for your specific plugin requirements.